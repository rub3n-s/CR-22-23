function [perfGlobal,perfTest] = genericTrainFunction(...
                                    camadasEscondidas, ...
                                    neuroniosCamada1, neuroniosCamada2, neuroniosCamada3, ...
                                    funcTreino,  funcAtivacao1, funcAtivacao2, funcAtivacao3, funcDivisao, ...
                                    train, val, test, ...
                                    pasta, nomeRede)

%% Definir Constantes e Variaveis
% Resolucao das imagens
% Tamanho padrao das imagens 150x150
% Minimo 25x25
IMG_RES = [25 25];

% Numero de ficheiros de imagem por pasta
NUM_FILES = 50;

% Numero de pastas
NUM_FOLDERS = 14;

% Gerar uma matriz
binaryMatrix = zeros(IMG_RES(1) * IMG_RES(2), NUM_FILES);
targetMatrix = [];
count = 1;

%% Ler, redimensionar e preparar os targets
fprintf('\nA ler imagens...\nPastas acessadas:\n');
for i=1:NUM_FOLDERS
    % Definir o caminho para a pasta
    switch(i-1)
        case {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
            FOLDER_PATH = sprintf('../NN_datasets/%s/%d/',pasta,i-1);
        case 10 % add
            FOLDER_PATH = sprintf('../NN_datasets/%s/add/',pasta);
        case 11 % div
            FOLDER_PATH = sprintf('../NN_datasets/%s/div/',pasta);
        case 12 % mul
            FOLDER_PATH = sprintf('../NN_datasets/%s/mul/',pasta);
        case 13 % sub
            FOLDER_PATH = sprintf('../NN_datasets/%s/sub/',pasta);
    end

    % Mostrar as pastas acessadas
    fprintf('%s\n', FOLDER_PATH);

    % Percorrer os ficheiros dentro da pasta i
    for j=1:NUM_FILES
        img = imread(strcat(FOLDER_PATH,sprintf('%d.png',j)));
        img = im2gray(img);
        img = imresize(img, IMG_RES);
        binarizedImg = imbinarize(img);
        binaryMatrix(:, count) = reshape(binarizedImg, 1, []);
        count=count+1;
    end
end

% Obter todos os vetores (cada um corresponde a uma pasta)
vec1 = repelem(1, NUM_FILES);       % 0
vec2 = repelem(2, NUM_FILES);       % 1
vec3 = repelem(3, NUM_FILES);       % 2
vec4 = repelem(4, NUM_FILES);       % 3
vec5 = repelem(5, NUM_FILES);       % 4
vec6 = repelem(6, NUM_FILES);       % 5
vec7 = repelem(7, NUM_FILES);       % 6
vec8 = repelem(8, NUM_FILES);       % 7
vec9 = repelem(9, NUM_FILES);       % 8
vec10 = repelem(10, NUM_FILES);     % 9
vec11 = repelem(11, NUM_FILES);     % +
vec12 = repelem(12, NUM_FILES);     % /
vec13 = repelem(13, NUM_FILES);     % *
vec14 = repelem(14, NUM_FILES);     % -

% Preencher a matriz a partir dos vetores
targetMatrix = [vec1, vec2, vec3, vec4, vec5, vec6, vec7, ...
                vec8, vec9, vec10, vec11, vec12, vec13, vec14];

target = onehotencode(targetMatrix,1,'ClassNames',1:14);
in = binaryMatrix;

%% Treinar rede
% Testar com x neuronios e y camadas escondidas
switch(camadasEscondidas)
    case 1
        net = feedforwardnet(neuroniosCamada1);
    case 2
        net = feedforwardnet([neuroniosCamada1 neuroniosCamada2]);
    case 3
        net = feedforwardnet([neuroniosCamada1 neuroniosCamada2 neuroniosCamada3]);
end

%% Configurar a Rede
% Função de Ativação
net.layers{1}.transferFcn = 'tansig';
net.layers{2}.transferFcn = 'tansig';
net.layers{3}.transferFcn = 'purelin';
end